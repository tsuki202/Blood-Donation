package org.example;

import java.util.*;
import java.io.*;


public class Registration {
    private static final String FILE_NAME = "users.txt";
    private final List<UserData> users;

    public Registration() {
        users = new ArrayList<>();
        loadUsers();
    }

    public void register(String username, String password, String role) {
        if (userExists(username)) {
            System.out.println("‚ö† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î!");
            return;
        }

        users.add(new UserData(username, password, role));
        saveUsers();
        System.out.println("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!");
    }

    public boolean userExists(String username) {
        return users.stream().anyMatch(user -> user.username().equals(username));
    }

    public String getPassword(String username) {
        return users.stream()
                .filter(user -> user.username().equals(username))
                .map(UserData::password)
                .findFirst()
                .orElse(null);
    }

    public String getRole(String username) {
        return users.stream()
                .filter(user -> user.username().equals(username))
                .map(UserData::role)
                .findFirst()
                .orElse(null);
    }

    public void deleteUser(String username) {
        if (!userExists(username)) {
            System.out.println("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
            return;
        }

        users.removeIf(user -> user.username().equals(username));
        saveUsers();
        System.out.println("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + username + " –≤–∏–¥–∞–ª–µ–Ω–æ.");
    }

    public void listUsers() {
        if (users.isEmpty()) {
            System.out.println("üìå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
            return;
        }
        users.forEach(user -> System.out.println("üë§ –õ–æ–≥—ñ–Ω: " + user.username() + ", –†–æ–ª—å: " + user.role()));
    }

    private void saveUsers() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            out.writeObject(users);
        } catch (IOException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: " + e.getMessage());
        }
    }

    private void loadUsers() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;

        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            users.addAll((List<UserData>) in.readObject());
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: " + e.getMessage());
        }
    }

    // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    private record UserData(String username, String password, String role) implements Serializable {}
}



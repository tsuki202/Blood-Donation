package org.example;

import java.sql.*;
import java.sql.Date;
import java.util.*;
class DatabaseManager {
    private static final String URL = "jdbc:mysql://localhost:3306/users";
    private static final String USER = "root";
    private static final String PASSWORD = "admin12345";

    static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    public static void registerUser(String login, String password, String role) {
        try (Connection conn = getConnection()) {
            PreparedStatement stmt = conn.prepareStatement("INSERT INTO users (login, password, role) VALUES (?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, login);
            stmt.setString(2, password);
            stmt.setString(3, role);
            stmt.executeUpdate();

            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                int userId = rs.getInt(1);
                Scanner scanner = new Scanner(System.in);
                switch (role.toUpperCase()) {
                    case "ADMIN" -> {
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ");
                        String name = scanner.nextLine();
                        PreparedStatement ps = conn.prepareStatement("INSERT INTO admins (id, name) VALUES (?, ?)");
                        ps.setInt(1, userId);
                        ps.setString(2, name);
                        ps.executeUpdate();
                    }
                    case "DONOR" -> {
                        System.out.print("–Ü–º'—è: ");
                        String name = scanner.nextLine();
                        System.out.print("–ü—Ä—ñ–∑–≤–∏—â–µ: ");
                        String surname = scanner.nextLine();
                        System.out.print("–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ");
                        int year = Integer.parseInt(scanner.nextLine());
                        System.out.print("–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ");
                        String blood = scanner.nextLine();
                        PreparedStatement ps = conn.prepareStatement("INSERT INTO donors (id, name, surname, year, blood_type) VALUES (?, ?, ?, ?, ?)");
                        ps.setInt(1, userId);
                        ps.setString(2, name);
                        ps.setString(3, surname);
                        ps.setInt(4, year);
                        ps.setString(5, blood);
                        ps.executeUpdate();
                    }
                    case "RECIPIENT" -> {
                        System.out.print("–Ü–º'—è: ");
                        String name = scanner.nextLine();
                        System.out.print("–ü—Ä—ñ–∑–≤–∏—â–µ: ");
                        String surname = scanner.nextLine();
                        System.out.print("–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ");
                        int year = Integer.parseInt(scanner.nextLine());
                        System.out.print("–Ø–∫—É –≥—Ä—É–ø—É –∫—Ä–æ–≤—ñ –ø–æ—Ç—Ä–µ–±—É—î: ");
                        String neededBlood = scanner.nextLine();
                        System.out.print("–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É (yyyy-mm-dd): ");
                        String requestDate = scanner.nextLine();
                        System.out.print("–î—ñ–π—Å–Ω–∏–π –¥–æ (yyyy-mm-dd): ");
                        String untilDate = scanner.nextLine();
                        PreparedStatement ps = conn.prepareStatement("INSERT INTO recipients (id, name, surname, year, needed_blood_type, request_date, valid_until) VALUES (?, ?, ?, ?, ?, ?, ?)");
                        ps.setInt(1, userId);
                        ps.setString(2, name);
                        ps.setString(3, surname);
                        ps.setInt(4, year);
                        ps.setString(5, neededBlood);
                        ps.setDate(6, Date.valueOf(requestDate));
                        ps.setDate(7, Date.valueOf(untilDate));
                        ps.executeUpdate();
                    }
                }
                System.out.println("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: " + e.getMessage());
        }
    }

    public static Optional<UserData> getUserByLogin(String login) {
        try (Connection conn = getConnection()) {
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM users WHERE login = ?");
            stmt.setString(1, login);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return Optional.of(new UserData(
                        rs.getInt("id"),
                        rs.getString("login"),
                        rs.getString("password"),
                        rs.getString("role")
                ));
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + e.getMessage());
        }
        return Optional.empty();
    }

    public static void listAllUsers() {
        try (Connection conn = getConnection()) {
            ResultSet rs = conn.createStatement().executeQuery("SELECT id, login, role FROM users");
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + ", –õ–æ–≥—ñ–Ω: " + rs.getString("login") + ", –†–æ–ª—å: " + rs.getString("role"));
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫: " + e.getMessage());
        }
    }

    public static void listUsersByRole(String role) {
        try (Connection conn = getConnection()) {
            PreparedStatement stmt = conn.prepareStatement("SELECT id, login FROM users WHERE role = ?");
            stmt.setString(1, role);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + ", –õ–æ–≥—ñ–Ω: " + rs.getString("login") + ", –†–æ–ª—å: " + role);
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–æ–ª–ª—é: " + e.getMessage());
        }
    }

    public void deleteUserByRole() {
        while (true) {
            System.out.println("\nüóëÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:");
            System.out.println("1 - –ê–¥–º—ñ–Ω–∏");
            System.out.println("2 - –î–æ–Ω–æ—Ä–∏");
            System.out.println("3 - –†–µ—Ü–∏–ø—ñ—î–Ω—Ç–∏");
            System.out.println("4 - –í–∏—Ö—ñ–¥");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            String input = scanner.nextLine();
            switch (input) {
                case "1", "2", "3" -> {
                    String role = switch (input) {
                        case "1" -> "ADMIN";
                        case "2" -> "DONOR";
                        case "3" -> "RECIPIENT";
                        default -> throw new IllegalStateException("Unexpected value: " + input);
                    };

                    DatabaseManager.printUsersByRole(role);
                    System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
                    String idInput = scanner.nextLine();
                    if (!idInput.matches("\\d+")) {
                        System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.");
                        continue;
                    }
                    int id = Integer.parseInt(idInput);
                    DatabaseManager.deleteUserById(id);
                    System.out.println("üìã –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:");
                    DatabaseManager.printUsersByRole(role);
                }
                case "4" -> {
                    return;
                }
                default -> System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

}